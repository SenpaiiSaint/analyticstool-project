generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          String      @default("user")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  dashboards    Dashboard[]
  reports       Report[]
  sessions      Session[]

  @@index([email], map: "user_email_idx")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dashboard {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports     DashboardReport[]
}

model Report {
  id         String            @id @default(uuid())
  title      String
  data       Json
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  userId     String?
  viewCount  Int               @default(0)
  dashboards DashboardReport[]
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags       ReportTag[]
}

model DashboardReport {
  dashboardId String
  reportId    String
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([dashboardId, reportId])
}

/// *
/// * Tag System to categorize or label reports
model Tag {
  id      String      @id @default(uuid())
  name    String      @unique(map: "tag_name_unique")
  reports ReportTag[]
}

model ReportTag {
  reportId String
  tagId    String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([reportId, tagId])
  @@index([tagId], map: "tag_id_idx")
}

